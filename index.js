const fetch=require("node-fetch"),{HttpsProxyAgent:e}=require("https-proxy-agent"),{SocksProxyAgent:t}=require("socks-proxy-agent"),readline=require("readline"),WebSocket=require("ws"),crypto=require("crypto"),fs=require("fs").promises,kleur=require("kleur"),banner=require("./banner"),config={tokens:[],baseUrl:"https://app.despeed.net",checkInterval:6e4,proxy:{enabled:!1,type:"http",url:"",timeout:1e4,maxRetries:3,testUrl:"https://api.ipify.org?format=json"}},logger={info:e=>console.log(kleur.blue("ℹ"),kleur.white(e)),success:e=>console.log(kleur.green("✔"),kleur.white(e)),warning:e=>console.log(kleur.yellow("⚠"),kleur.white(e)),error:e=>console.log(kleur.red("✖"),kleur.white(e)),speed:e=>console.log(kleur.cyan("↯"),kleur.white(e)),time:e=>console.log(kleur.magenta("⏰"),kleur.white(e)),location:e=>console.log(kleur.yellow("\uD83D\uDCCD"),kleur.white(e)),network:e=>console.log(kleur.blue("\uD83C\uDF10"),kleur.white(e))};async function loadTokensFromFile(){try{let e=await fs.readFile("token.txt","utf8"),t=e.split("\n").map(e=>e.trim()).filter(e=>e&&!e.startsWith("#"));if(0===t.length)throw Error("No valid tokens found in token.txt");return config.tokens=t,logger.success(`Loaded ${t.length} tokens from token.txt`),!0}catch(o){return"ENOENT"===o.code?logger.error("token.txt file not found"):logger.error(`Error reading token file: ${o.message}`),!1}}async function loadProxyFromFile(){try{let e=await fs.readFile("proxy.txt","utf8"),t=e.trim();if(!t)return null;return t.startsWith("http://")||t.startsWith("https://")?(config.proxy.type="http",config.proxy.url=t):t.startsWith("socks4://")?(config.proxy.type="socks4",config.proxy.url=t):t.startsWith("socks5://")?(config.proxy.type="socks5",config.proxy.url=t):(config.proxy.type="http",config.proxy.url=`http://${t}`),!0}catch(o){return"ENOENT"!==o.code&&logger.error(`Error reading proxy file: ${o.message}`),null}}async function createProxyAgent(){if(config.proxy.url)try{if("http"===config.proxy.type)return new e({proxy:config.proxy.url,timeout:config.proxy.timeout,keepAlive:!0,maxFreeSockets:256,maxSockets:256});return new t({proxy:config.proxy.url,timeout:config.proxy.timeout,keepAlive:!0,type:"socks4"===config.proxy.type?4:5})}catch(o){logger.error(`Failed to create proxy agent: ${o.message}`);return}}async function isProxyAlive(e){try{let t=await fetch(config.proxy.testUrl,{agent:e,timeout:config.proxy.timeout});return t.ok}catch{return!1}}async function getProxyAgent(e=config.proxy.maxRetries){if(config.proxy.enabled)for(let t=0;t<e;t++)try{let o=await createProxyAgent();if(!o)return;if(await isProxyAlive(o))return logger.success(`Proxy connection established (${config.proxy.type})`),o;logger.warning(`Proxy check failed, attempt ${t+1}/${e}`),await new Promise(e=>setTimeout(e,1e3*(t+1)))}catch(r){if(logger.error(`Proxy error (${t+1}/${e}): ${r.message}`),t===e-1)throw Error("Maximum proxy retry attempts reached")}}function generateRandomLocation(){let e={minLat:18,maxLat:53.55,minLng:73.66,maxLng:135.05},t=e.minLat+Math.random()*(e.maxLat-e.minLat),o=e.minLng+Math.random()*(e.maxLng-e.minLng);return{latitude:Math.round(1e6*t)/1e6,longitude:Math.round(1e6*o)/1e6}}async function initConfig(){logger.info("Starting configuration setup...");let e=await loadTokensFromFile();if(!e)throw Error("Failed to load tokens from token.txt");let t=await loadProxyFromFile();if(t)logger.success("Loaded proxy configuration from proxy.txt"),config.proxy.enabled=!0;else{let o=readline.createInterface({input:process.stdin,output:process.stdout}),r=e=>new Promise(t=>o.question(e,t)),n="y"===(await r(kleur.cyan("Use proxy? (y/n): "))).toLowerCase();if(n){config.proxy.enabled=!0;let i=await r(kleur.cyan("Enter proxy URL (e.g., http://user:pass@ip:port or socks5://ip:port): "));config.proxy.url=i,i.startsWith("socks4://")?config.proxy.type="socks4":i.startsWith("socks5://")?config.proxy.type="socks5":config.proxy.type="http"}let a=await r(kleur.cyan("Enter check interval (minutes, default 1): "));config.checkInterval=6e4*(parseInt(a)||1),o.close()}logger.success("Configuration completed!"),logger.info("Current settings:");let s={...config,tokens:`${config.tokens.length} tokens loaded`};console.log(kleur.gray(JSON.stringify(s,null,2)))}function getCommonHeaders(e){return{Authorization:`Bearer ${e}`,"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.0.0",Accept:"application/json, text/plain, */*","Accept-Language":"en-US,en;q=0.9","Cache-Control":"no-cache",Pragma:"no-cache","sec-ch-ua":'"Microsoft Edge";v="129", "Not=A?Brand";v="8", "Chromium";v="129"',"sec-ch-ua-mobile":"?0","sec-ch-ua-platform":'"Windows"',Origin:"https://app.despeed.net",Referer:"https://app.despeed.net/dashboard"}}async function validateToken(e){if(!e)throw Error("Token not found");try{let t=JSON.parse(atob(e.split(".")[1]));if((t.exp-90)*1e3<Date.now())throw Error("Token expired");let o=await getProxyAgent(),r=await fetch(`${config.baseUrl}/v1/api/auth/profile`,{headers:getCommonHeaders(e),agent:o,timeout:3e4});if(!r.ok)throw Error("Token invalid");return!0}catch(n){return logger.error(`Token validation failed: ${n.message}`),!1}}async function performSpeedTest(){try{logger.network("Starting network speed measurement...");let e={client_name:"speed-measurementlab-net-1",client_session_id:crypto.randomUUID()},t=await getProxyAgent(),o=new URL("https://locate.measurementlab.net/v2/nearest/ndt/ndt7");o.search=new URLSearchParams(e).toString(),logger.info("Locating speed test server...");let r=await fetch(o,{agent:t,timeout:3e4});if(!r.ok)throw Error(`Failed to get speed test server: ${r.status}`);let n=await r.json();if(!n.results||!n.results[0])throw Error("No available speed test server");let i=n.results[0];logger.success(`Selected server: ${i.machine}`);let a=i.urls["wss:///ndt/v7/download"],s=i.urls["wss:///ndt/v7/upload"];logger.network("Starting download test...");let l=0;await new Promise(e=>{let o=config.proxy.enabled?{agent:t}:void 0,r=new WebSocket(a,"net.measurementlab.ndt.v7",o),n=Date.now(),i=0,s=null;r.on("open",()=>{n=Date.now(),i=0}),r.on("message",e=>{if("string"==typeof e){s=JSON.parse(e);return}i+=e.length;let t=Date.now(),o=(t-n)/1e3;o>=10&&(l=8*i/(1e6*o),r.close())}),r.on("close",()=>{logger.speed(`Download: ${l.toFixed(2)} Mbps`),e()}),r.on("error",t=>{logger.error(`Download test error: ${t.message}`),e()})}),logger.network("Starting upload test...");let g=0;return await new Promise(e=>{let o=config.proxy.enabled?{agent:t}:void 0,r=new WebSocket(s,"net.measurementlab.ndt.v7",o),n=null,i=0,a=null,l=null,c=Buffer.alloc(16384);crypto.randomFillSync(c),r.on("open",()=>{n=Date.now(),i=0,l=setInterval(()=>{if(r.readyState===WebSocket.OPEN){let e=Date.now(),t=(e-n)/1e3;if(t>=10){g=8*i/(1e6*t),clearInterval(l),r.close();return}r.bufferedAmount<1048576&&(r.send(c),i+=c.length)}},1)}),r.on("message",e=>{if("string"==typeof e)try{if((a=JSON.parse(e)).TCPInfo){let t=a.TCPInfo,o=t.ElapsedTime||1;if(o>0){let r=t.BytesReceived/o*8;r>g&&(g=r)}}}catch(n){logger.error(`Error parsing server message: ${n.message}`)}}),r.on("close",()=>{if(l&&clearInterval(l),0===g&&n&&i>0){let t=(Date.now()-n)/1e3;g=8*i/(1e6*t)}logger.speed(`Upload: ${g.toFixed(2)} Mbps`),e()}),r.on("error",t=>{l&&clearInterval(l),logger.error(`Upload test error: ${t.message}`),e()}),setTimeout(()=>{l&&clearInterval(l),r.readyState===WebSocket.OPEN&&r.close()},15e3)}),{downloadSpeed:l,uploadSpeed:g}}catch(c){return logger.error(`Speed test error: ${c.message}`),{downloadSpeed:0,uploadSpeed:0}}}async function reportResults(e,t,o,r){try{logger.info("Submitting test results...");let n=await getProxyAgent(),i=await fetch(`${config.baseUrl}/v1/api/points`,{method:"POST",headers:{...getCommonHeaders(e),"Content-Type":"application/json"},agent:n,timeout:3e4,body:JSON.stringify({download_speed:Math.round(100*t)/100,upload_speed:Math.round(100*o)/100,latitude:r.latitude,longitude:r.longitude,timestamp:new Date().toISOString()})});if(!i.ok)throw Error(`Report failed: ${i.status}`);let a=await i.json();if(a.success)return logger.success("Results submitted successfully"),a;throw Error(a.message||"Report failed")}catch(s){return logger.error(`Error submitting results: ${s.message}`),null}}async function displayAccountInfo(e){try{logger.info("\n=== Account Information ===");let t=await getProxyAgent(),o=await fetch(`${config.baseUrl}/v1/api/auth/profile`,{headers:getCommonHeaders(e),agent:t,timeout:3e4});if(o.ok){let r=await o.json();logger.info(`Username: ${r.data.username||"Not set"}`),logger.info(`Email: ${r.data.email||"Not set"}`)}logger.info("=== ==================== ===\n")}catch(n){logger.error(`Failed to get account information: ${n.message}`)}}async function processAccount(e,t){try{logger.info(`
=== Processing Account ${t+1} ===`),logger.time(`Time: ${new Date().toLocaleString()}`);let o=await validateToken(e);if(!o)return logger.error(`Token ${t+1} is invalid or expired`),!1;logger.success(`Token ${t+1} validation successful`),await displayAccountInfo(e);let r=generateRandomLocation();logger.location(`Speed test location: ${r.latitude}, ${r.longitude}`),logger.network("Starting speed test...");let{downloadSpeed:n,uploadSpeed:i}=await performSpeedTest();logger.speed(`Final Download speed: ${n.toFixed(2)} Mbps`),logger.speed(`Final Upload speed: ${i.toFixed(2)} Mbps`);let a=await reportResults(e,n,i,r);if(a&&a.success)return logger.success("Speed test completed and results reported"),!0;return logger.error("Failed to report results"),a&&a.message&&logger.error(`Failure reason: ${a.message}`),!1}catch(s){if(logger.error(`Error processing account ${t+1}: ${s.message}`),s.response)try{let l=await s.response.json();logger.error(`Server response: ${JSON.stringify(l)}`)}catch{logger.error(`Status code: ${s.response.status}`)}return!1}}async function main(){try{logger.info("\n=== Starting multi-account speed test ===");for(let e=0;e<config.tokens.length;e++)await processAccount(config.tokens[e],e),e<config.tokens.length-1&&(logger.info("Waiting 30 seconds before processing next account..."),await new Promise(e=>setTimeout(e,3e4)))}catch(t){logger.error(`Error during main loop: ${t.message}`)}finally{let o=new Date(Date.now()+config.checkInterval);logger.time(`Next test cycle scheduled for: ${o.toLocaleString()}`),logger.info(`Interval: ${Math.round(config.checkInterval/1e3/60)} minutes`),logger.info("=== Speed test cycle complete ===\n"),setTimeout(main,config.checkInterval)}}process.on("SIGINT",()=>{logger.warning("\nReceived exit signal"),process.exit(0)}),process.on("SIGTERM",()=>{logger.warning("\nReceived terminate signal"),process.exit(0)}),console.clear(),console.log(kleur.cyan(banner)),logger.info("Initializing Multi-Account DeSpeed Test Client..."),initConfig().then(()=>{main()}).catch(e=>{logger.error(`Initialization error: ${e.message}`),process.exit(1)});
